buildscript {
    repositories {
    	maven { url  = 'https://plugins.gradle.org/m2/' }
	gradlePluginPortal()
	mavenCentral()
	jcenter()
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.0"
    }
}

plugins {
	id 'org.quiltmc.loom' version '1.+'
	id 'maven-publish'
    	id 'idea'
   	id 'com.github.johnrengelman.shadow' version '7.1.0'
    	id 'com.matthewprenger.cursegradle' version '1.4.0'
   	id "com.modrinth.minotaur" version "2.+"
}

archivesBaseName = "${mod_name}-quilt-${minecraft_version}"

dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
	}
	modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"
	modImplementation("org.quiltmc:qsl:${quilt_stdlib_version}") {
		exclude group: "net.fabricmc"
	}
	modImplementation("org.quiltmc.quilted-fabric-api:quilted-fabric-api:${quilted_fabric_api}") {
		exclude group: "org.quiltmc", module:" qsl"
	}
	compileOnly project(":Common")
	compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
	annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
}

loom {
    	accessWidenerPath = file("${project(':Common').projectDir.path}/src/main/resources/${mod_id}_common.accesswidener")
	runs {
		client {
			client()
			setConfigName("Quilt Client")
			ideConfigGenerated(true)
			runDir("run")
		}
		server {
			server()
			setConfigName("Quilt Server")
			ideConfigGenerated(true)
			runDir("runServer")
		}
	}
    	mixin {
        	defaultRefmapName = "${mod_id}.refmap.json"
    	}
}

processResources {
    from project(":Common").sourceSets.main.resources
	inputs.property "version", project.version

	filesMatching("quilt.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

jar {
	from("LICENSE") {
		rename { "${it}_${mod_name}"}
	}
}

if (file('key.properties').exists()) {
	curseforge {

		def curseProp = new Properties()
		File secretPropsFile = file("key.properties")
		curseProp.load(secretPropsFile.newInputStream())

		project {
			apiKey = curseProp.getProperty('curseKey')
			id = "402964"
			releaseType = "release"
			changelogType = 'text'
			changelog = file('CHANGELOG.txt')
			addGameVersion("1.19.3")
			addGameVersion("1.19.4")
			addGameVersion("Quilt")
			addGameVersion("Java 17")

			relations {
				requiredDependency 'fabric-api'
			}
			mainArtifact(remapJar)

			afterEvaluate {
				uploadTask.dependsOn("remapJar")
			}
		}
		options {
			//debug = true
			forgeGradleIntegration = false
		}
	}
}

if (file('key.properties').exists()) {
	modrinth {
		def modrinthProp = new Properties()
		File secretPropsFile = file("key.properties")
		modrinthProp.load(secretPropsFile.newInputStream())

		token = modrinthProp.getProperty('modrinthKey')
		projectId = 'v2ZRwtDV'
		versionNumber = project.version
		versionName = '1.19.3/4 Quilt'
		uploadFile = remapJar
		changelog = rootProject.file("changelog.txt").text
		gameVersions = ['1.19.3','1.19.4']
		loaders = ['quilt']
		dependencies {
			required.project "qsl"
		}
	}
}